Adicionar/implementar:

- BootStrap4 via CDN
- Paginação
- Busca
- ...


Criação do app-mvc

= Criação dos .htaccess

Tudo começa com os dois .htaccess. 

== app-mvc/.htaccess
O do raiz do aplicativo redireciona todas as requisições para a pasta raiz para a pasta public

RewriteEngine on
RewriteRule ^(.*) public/$1 [L]

== app-mvc/public/.htaccess
Este redireciona toda requisição que chega ao app-mvc/public para o app-mvc/public/index.php

Options -MultiViews

# Activates URL rewriting (like myproject.com/controller/action/1/2/3)
RewriteEngine On

# Prevent people from looking directly into folders
#Options -Indexes

# If the following conditions are true, then rewrite the URL:
# If the requested filename is not a directory,
RewriteCond %{REQUEST_FILENAME} !-d
# and if the requested filename is not a regular file that exists,
RewriteCond %{REQUEST_FILENAME} !-f
# and if the requested filename is not a symbolic link,
RewriteCond %{REQUEST_FILENAME} !-l
# then rewrite the URL in the following way:
# Take the whole request filename and provide it as the value of a
# "url" query parameter to index.php. Append any query string from
# the original URL as further query parameters (QSA), and stop
# processing this .htaccess file (L).
RewriteRule ^(.+)$ index.php?url=$1 [QSA,L]


== app-mvc/public/index.php

Este é o ponto de entrada do aplicativo/entry point, chamado de front controller

<?php
// set a constant that holds the project's folder path, like "/var/www/html/app-mvc".
// DIRECTORY_SEPARATOR adds a slash to the end of the path
define('ROOT', dirname(__DIR__) . DIRECTORY_SEPARATOR);

// set a constant that holds the project's "application" folder, like "/var/www/html/app-mvc/application".
define('APP', ROOT . 'application' . DIRECTORY_SEPARATOR);
print APP;exit;
// This is the auto-loader for Composer-dependencies (to load tools into your project).
require_once ROOT . 'vendor/autoload.php';

// load application config (error reporting etc.)
require_once APP . 'config/config.php';

// load application class
use Mvc\Core\Router;

// start the application
$app = new Router();

Aqui são definidas duas constantes:

ROOT - que captura a pasta raiz do aplicativo, no caso /var/www/html/app-mvc/
APP - que captura o path completo da pasta application, no caso /var/www/html/app-mvc/application/

Também é feito o require_once do autoload do composer e do arquivo config.php, onde está basicamente a configuração do banco de dados
Também é feita a carga da classe Router e seu instanciamento, que dá acesso as rotas para o aplicativo.

Veja o que mostra esta linha abaixo inserida logo abaixo de $app = new Router();

var_dump($app);exit;

/backup/www/app-mvc/public/index.php:40:
object(Mvc\Core\Router)[3]
  private 'url_controller' => null
  private 'url_action' => null
  private 'url_params' => 
    array (size=0)
      empty

Lida com controller, action e parameters.


== app-mvc/application/Core/Router.php

Inicialmente chama o método splitUrl() que quebra a URL em partes: controller, action e parameters.
Logo no construtor ele lida com os controllers, actions e parâmetros e abaixo com o método splitUrl(), quebra a URL.
Então checa por controllers, caso exista será chamado, 
Depois verifica o método e o chama. Caso nenhum action seja chamado será aberto o default, que é o index
Caso exista parâmetros os chama também. Caso nenhum seja chamado será aberto apenas controller/action

Também controla os demais ou disparará o controller Error caso seja apropriado.

Os usuários tanto podem usar os links do menu, quando podem digitar diretamente o link para o recurso desejado. Exemplos:

http://localhost/app-mvc/customers
http://localhost/app-mvc/customers/edit/7
http://localhost/app-mvc/customers/delete/3


== app-mvc/application/Core/Model.php

Esta é a classe base dos models

<?php
namespace Mvc\Core;
use PDO;

class Model
{
    public $db = null;

    function __construct()
    {
        try {
            self::openDatabaseConnection();
        } catch (\PDOException $e) {
            exit('Database connection could not be established.');
        }
    }

    private function openDatabaseConnection()
    {
        $options = array(PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_OBJ, PDO::ATTR_ERRMODE => PDO::ERRMODE_WARNING);
        
        if (DB_TYPE == "pgsql") {
            $databaseEncodingenc = " options='--client_encoding=" . DB_CHARSET . "'";
        } else {
            $databaseEncodingenc = "; charset=" . DB_CHARSET;
        }

        $this->db = new PDO(DB_TYPE . ':host=' . DB_HOST . ';dbname=' . DB_NAME . $databaseEncodingenc, DB_USER, DB_PASS, $options);
    }
}

Veja o aplicativo, onde mantive os comentários originais, que esclarecem sobre o código


== app-mvc/application/Libs/helper.php

Esta é a classe para debug do PDO

<?php
namespace Mvc\Libs;

class Helper
{
    static public function debugPDO($raw_sql, $parameters) {

        $keys = array();
        $values = $parameters;

        foreach ($parameters as $key => $value) {
            if (is_string($key)) {
                $keys[] = '/' . $key . '/';
            } else {
                $keys[] = '/[?]/';
            }

            if (is_string($value)) {
                $values[$key] = "'" . $value . "'";
            } elseif (is_array($value)) {
                $values[$key] = implode(',', $value);
            } elseif (is_null($value)) {
                $values[$key] = 'NULL';
            }
        }

        $raw_sql = preg_replace($keys, $values, $raw_sql, 1, $count);
        return $raw_sql;
    }
}


== app-mvc/application/Controller/CustomersController.php

Um dos controllers.

<?php
namespace Mvc\Controller;
use Mvc\Model\Customer;

class CustomersController
{
    public function index()
    {
        $Customer = new Customer();
        $customers = $Customer->getAllCustomers();
        $amount_of_customers = $Customer->getAmountOfCustomers();

        require APP . 'view/_templates/header.php';
        require APP . 'view/customers/index.php';
        require APP . 'view/_templates/footer.php';
    }

    public function add()
    {
        // if we have POST data to create a new customer entry
        if (isset($_POST["submit_add_customer"])) {
            // Instance new Model (Customer)
            $Customer = new Customer();
            // do add() in model/model.php
            $Customer->add($_POST["name"], $_POST["email"],  $_POST["birthday"]);
        }

        // where to go after Customer has been added
        header('location: ' . URL . 'customers/index');
    }

    public function delete($customer_id)
    {
        // if we have an id of a customer that should be deleted
        if (isset($customer_id)) {
            // Instance new Model (Customer)
            $Customer = new Customer();
            // do delete() in model/model.php
            $Customer->delete($customer_id);
        }

        // where to go after customer has been deleted
        header('location: ' . URL . 'customers/index');
    }

    public function edit($customer_id)
    {
        // if we have an id of a customer that should be edited
        if (isset($customer_id)) {
            // Instance new Model (Customer)
            $Customer = new Customer();
            // do getCustomer() in model/model.php
            $customer = $Customer->getCustomer($customer_id);

            // If the customer wasn't found, then it would have returned false, and we need to display the error page
            if ($customer === false) {
                $page = new \Mvc\Controller\ErrorController();
                $page->index();
            } else {
                // load views. within the views we can echo out $customer easily
                require APP . 'view/_templates/header.php';
                require APP . 'view/customers/edit.php';
                require APP . 'view/_templates/footer.php';
            }
        } else {
            // redirect user to Customers index page (as we don't have a customer_id)
            header('location: ' . URL . 'customers/index');
        }
    }

    public function update()
    {
        // if we have POST data to create a new customer entry
        if (isset($_POST["submit_update_customer"])) {
            // Instance new Model (Customer)
            $Customer = new Customer();
            // do update() from model/model.php
            $Customer->update($_POST["name"], $_POST["email"],  $_POST["birthday"], $_POST['customer_id']);
        }

        // where to go after customer has been added
        header('location: ' . URL . 'customers/index');
    }
}

Agora os controllers Error e Home:

<?php

namespace Mvc\Controller;

class ErrorController
{
    public function index()
    {
        // load views
        require APP . 'view/_templates/header.php';
        require APP . 'view/error/index.php';
        require APP . 'view/_templates/footer.php';
    }
}


<?php
namespace Mvc\Controller;

class HomeController
{
    public function index()
    {
        // load views
        require APP . 'view/_templates/header.php';
        require APP . 'view/home/index.php';
        require APP . 'view/_templates/footer.php';
    }
}


== app-mvc/application/Model/Customer.php

Mostrando apenas um model, o outro é semelhante.

<?php
namespace Mvc\Model;
use Mvc\Core\Model;

class Customer extends Model
{
    public function getAllCustomers()
    {
        $sql = "SELECT id, name, email, birthday FROM customers";
        $query = $this->db->prepare($sql);
        $query->execute();
    }

    public function add($name, $email, $birthday)
    {
        $sql = "INSERT INTO customers (name, email, birthday) VALUES (:name, :email, :birthday)";
        $query = $this->db->prepare($sql);
        $parameters = array(':name' => $name, ':email' => $email, ':birthday' => $birthday);

        $query->execute($parameters);
    }

    public function delete($customer_id)
    {
        $sql = "DELETE FROM customers WHERE id = :customer_id";
        $query = $this->db->prepare($sql);
        $parameters = array(':customer_id' => $customer_id);

        $query->execute($parameters);
    }

    public function getCustomer($customer_id)
    {
        $sql = "SELECT id, name, email, birthday FROM customers WHERE id = :customer_id LIMIT 1";
        $query = $this->db->prepare($sql);
        $parameters = array(':customer_id' => $customer_id);

        $query->execute($parameters);
        return ($query->rowcount() ? $query->fetch() : false);
    }

    public function update($name, $email, $birthday, $customer_id)
    {
        $sql = "UPDATE customers SET name = :name, email = :email, birthday = :birthday WHERE id = :customer_id";
        $query = $this->db->prepare($sql);
        $parameters = array(':name' => $name, ':email' => $email, ':birthday' => $birthday, ':customer_id' => $customer_id);

        $query->execute($parameters);
    }

    public function getAmountOfCustomers()
    {
        $sql = "SELECT COUNT(id) AS amount_of_customers FROM customers";
        $query = $this->db->prepare($sql);
        $query->execute();

        return $query->fetch()->amount_of_customers;
    }
}

== app-mvc/application/config/config.php

<?php
/**
 * Configuration for: Error reporting
 * Useful to show every little problem during development, but only show hard errors in production
 */
define('ENVIRONMENT', 'development');

if (ENVIRONMENT == 'development' || ENVIRONMENT == 'dev') {
    error_reporting(E_ALL);
    ini_set("display_errors", 1);
}

define('URL_PUBLIC_FOLDER', 'public');
define('URL_PROTOCOL', '//');
define('URL_DOMAIN', $_SERVER['HTTP_HOST']);
define('URL_SUB_FOLDER', str_replace(URL_PUBLIC_FOLDER, '', dirname($_SERVER['SCRIPT_NAME'])));
define('URL', URL_PROTOCOL . URL_DOMAIN . URL_SUB_FOLDER);

define('DB_TYPE', 'mysql');
define('DB_HOST', '127.0.0.1');
define('DB_NAME', 'app-mvc');
define('DB_USER', 'root');
define('DB_PASS', 'root');
define('DB_CHARSET', 'utf8mb4');

Veja que podemos mudar o nome da pasta de entrada para outro nome diferente de public.
Também temos opção para ambientes.


== app-mvc/application/view/

Aqui ficam as pastas:
customers
	edit.php
	index.php
products
	edit.php
	index.php
error
	index.php

<div class="container">
    <p>This is the Error-page. Will be shown when a page (= controller / method) does not exist.</p>
</div>

home
	index.php

<div class="container">
    <h1>Home</h1>
    <h2>You are in the View: application/view/home/index.php (everything in the box comes from this file)</h2>
    <p>In a real application this could be the homepage.</p>
</div>

_template
	footer.php
	header.php

costomers/edit.php

<div class="container">
    <h2>You are in the View: application/view/customers/edit.php (everything in this box comes from that file)</h2>
    <!-- add customer form -->
    <div>
        <h3>Edit a customer</h3>
        <form action="<?php echo URL; ?>customers/update" method="POST">
            <label>Name</label>
            <input autofocus type="text" name="name" value="<?php echo htmlspecialchars($customer->name, ENT_QUOTES, 'UTF-8'); ?>" required />
            <label>E-mail</label>
            <input type="email" name="email" value="<?php echo htmlspecialchars($customer->email, ENT_QUOTES, 'UTF-8'); ?>" required />
            <label>Birthday</label>
            <input type="date" name="birthday" value="<?php echo htmlspecialchars($customer->birthday, ENT_QUOTES, 'UTF-8'); ?>" />
            <input type="hidden" name="customer_id" value="<?php echo htmlspecialchars($customer->id, ENT_QUOTES, 'UTF-8'); ?>" />
            <input type="submit" name="submit_update_customer" value="Update" />
        </form>
    </div>
</div>

costomers/index.php

<div class="container">
    <h1>Customers</h1>
    <h2>You are in the View: application/view/customers/index.php (everything in this box comes from that file)</h2>
    <!-- add customer form -->

    <div class="box">
        <h3>Add a customer</h3>
        <form action="<?php echo URL; ?>customers/add" method="POST">
            <label>Name</label>
            <input type="text" name="name" value="" required />
            <label>E-mail</label>
            <input type="email" name="email" value="" required />
            <label>Birthday</label>
            <input type="date" name="birthday" value="" />
            <input type="submit" name="submit_add_customer" value="Submit" />
        </form>
    </div>
    <!-- main content output -->
    <div class="box">
        <h3>Amount of customers: <?php echo $amount_of_customers; ?></h3>
        <h3>List of customers (data from model)</h3>
        <table>
            <thead style="background-color: #ddd; font-weight: bold;">
            <tr>
                <td>Id</td>
                <td>Name</td>
                <td>E-mail</td>
                <td>Birthday</td>
                <td>DELETE</td>
                <td>EDIT</td>
            </tr>
            </thead>
            <tbody>
            <?php foreach ($customers as $customer) { ?>
                <tr>
                    <td><?php if (isset($customer->id)) echo htmlspecialchars($customer->id, ENT_QUOTES, 'UTF-8'); ?></td>
                    <td><?php if (isset($customer->name)) echo htmlspecialchars($customer->name, ENT_QUOTES, 'UTF-8'); ?></td>
                    <td><?php if (isset($customer->email)) echo htmlspecialchars($customer->email, ENT_QUOTES, 'UTF-8'); ?></td>
                    <td><?php if (isset($customer->birthday)) echo htmlspecialchars($customer->birthday, ENT_QUOTES, 'UTF-8'); ?></td>
                    <td><a href="<?php echo URL . 'customers/delete/' . htmlspecialchars($customer->id, ENT_QUOTES, 'UTF-8'); ?>">delete</a></td>
                    <td><a href="<?php echo URL . 'customers/edit/' . htmlspecialchars($customer->id, ENT_QUOTES, 'UTF-8'); ?>">edit</a></td>
                </tr>
            <?php } ?>
            </tbody>
        </table>
    </div>
</div>

== Foram adicionadas duas dependências ao aplicativo original (mini3):
- faker
- phinx

== app-mvc/db
/migrations
/seeds

Nesta pasta ficam as migrations do aplicativo


== Instalação

Apenas faça o download do GitHub
https://github.com/ribafs/app-mvc

Descompacte no seu diretório web e renomeie para o nome desejado

Acesse o diretório e execute
composer install

Edite o arquivo application/config/config.php
E entre com as informações do banco de dados que irá trabalhar.

Migrations

Caso queira experimentar os dados existentes, então edite o arquivo do raiz
phinx.yml

E ajuste os dados do banco de dados no ambiente production ou noutro mas lembre de alterar os comandos abaixo:
php vendor/robmorgan/phinx/bin/phinx migrate -e production
php vendor/bin/phinx seed:run -e production


